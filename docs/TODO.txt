* tabs with lists of contacts and entities on profile and officials pages; all links in side panels + header links

* calculate ratings
* sorting official by last_name and sorting by ratings

* check admin rights in elements.views.check_permissions

* adding urls about officials + universal entity feature for it
* Subclass posts from entities (has features followers, admin, complaint, aggitators, ratings)

SEO:
    * Webmaster Tools, https://www.google.com/webmasters/
    * set proper page titles
    * sitemaps
    * block indexing tst.grakon.org

* Introduce FINAL_URL_PREFIX and use

* Class to standartize forms features

* restore location on error in form

* user's avatar, use it in disqus, emails

* complaints

* Emails: DomainKeys, Sender ID, DKIM, SPF (dns configuration + document it)

* text fields for resources + other option

* override save() method of EntityProperty models to reset cache
-------------------------------------------------------------------------------
* popups with user's info and points in right panel

* in profile editing move resources above about, load about field faster

* show sender's points in message email

* form fields are not highlighted anymore (with uniform script)

* entity model must contain info on how to display its instances in side panels and tables

* Give points for disqus activity, negative for complaints

* move test server to Grisha's account

* process cases when edit tab is not shown but user tries to access it (e.g. other user's profile edit),
  generalize tabs creation

SEO:
    * Disallow paths in robots.txt (see django-social-auth example) - generate it and put in static on deployment

* send email notifying that user has been added to contacts (+ ability to unsubscribe)

* pages for tools and users (with search) + bring them back in main menu

* editing locations in officials

* дополнительные поля в профайле (телефон, скайп, сайт, возраст?->дата рождения)

* How to respond to messages? (link to profile page with opened dialog + reply_to)

Emails:
    * subscription configuration
    * page with form for writing messages (put link on it in emails)
    * link to feedback form (or our email), 'read us' buttons in email template (Yulia)

Wall:
    * неправильный заголовок на вкладке логина через гракон
    * special login url, which closes window

* Use aggregates for counting points

Performance:
    * in chrome page reloads on tabs change
    * move scripts loading at the bottom of html (or use defer), use firebug profiler and Net tab

Front-end:
    * show g+ and vk buttons in dev mode; add these buttons to pages
    * share buttons
    * when two buttons are close to each other (e.g. profile edit) - line appears between them
    * unused skill icon in icons/badges.png
    * shortcut to prevent using enter in dialog forms
    * remove-after-launch
    * aw-showcase
    * share and share_horizontal overlap a lot

Misc:
    * replace grakon_share_logo.jpg with logos/share.jpg (google oauth2 app), smaller version (60x60),
        move logo url to settings
    * reset cache on changes
    * add tips to buttons and ? signs to get help on features of the system
    * in forms limit lengths of strings that go into model's CharField

* Graphs with statistics (in dashboard first)

* Check that urls are specified properly in templates (look for "/ and http://grakon.org

* ability to request entity deletion (like with profiles)

* privacy settings

--------------------------------------
* use jinja instead of django templates (?) Check rendering time

* Invite old users and simplify account creation for them (autofill name, insert hash to confirm email), registration form must be able to take get parameters
* Ability to send mails to unregistered users (add email field to Email model)

* Left column of profile - administration, participation, представитель организации, etc.

* Types of officials (депутаты, судьи, адвокаты)
* Pages for places

* combine create pages with search pages

* display entities assigned to higher levels of hierarchy on lower levels

* use gravatar

* in registration don't take password at first (like in gravatar.com)?

* choosing main location

* Show list my locations in top panel (if there are more than 1)

* friend invitation

* generate links in breadcrumbs in such a way that an opened tab doesn't change at navigation

* move password change views to users (from auth)
* reasons to register on registration page (merge with landing page)

* use celery to send emails (method for delayed sending of email)

* show post messages

* move fb:admins meta tag value out of template

* allow user to start working without confirmation of his email, but limit his functionality (?)

* captchas

* dashboard with statistics (emails, users activities, traffic, etc.)

* in 'about' fields add target="_blank" to all external links

* give superuser the rights of all admins

* display html fields in admin listings nicely (extract text only)
--------------------------------------
Emails:
    * script to retrieve and analyze bounce messages, spam complaints (celery tasks checking gmail messages)
    * list-unsubscribe header
    * messages, subscription @grakon.org

Registration
    * configure registration with fb, vk, google
    * consider case when user refuses to give rights to application
    * create page for LOGIN_ERROR_URL
    * configure django-social-auth
    * merge accounts from social and email (see SOCIAL_AUTH_ASSOCIATE_BY_MAIL)
    * google allows to login automatically if account with this email already exists (is it ok?)
    * set application permissions (e.g. FACEBOOK_EXTENDED_PERMISSIONS)
    * create google oauth2 app from grakon account (?)
    * file with all passwords, social applications (where to get them)
    * add Facebook App ID to disqus

Front-end
    * conventions file for front-end developer (docs about tabs and buttons, page layout)
    * take only necessary parts of jquery-ui, compress
    * use sprites to extract images from one file (especially icons) (https://github.com/jorgebastida/glue)

    * http://sass-lang.com/, http://www.bigjason.com/blog/using-sass-django/,
      http://compass-style.org/blog/2011/05/09/compass-django/
    * https://github.com/dziegler/django-css
    * http://www.modernizr.com/

    * automate search for unused and missing images, style classes

Analytics:
    * client-side error logging - http://www.thetaboard.com/blog/client-side-error-logging-with-google-analytics?r=378
    * analytics of registration (events in GA - http://code.google.com/apis/analytics/docs/tracking/eventTrackerGuide.html) - success, errors, just visits
    * analyze when user visited site/logged in last time
    * configure logging, sentry
    * analyze access logs, use google analytics api; regularly build and analyze statistics of visits,
      which pages are visited
    * use yandex targets (?) to monitor pressing buttons, registration and other activities
    * use page visits analytics to determine optimal caching times
    * use Graphite for server monitoring - http://blog.mozilla.com/webdev/2012/04/05/tracking-deployments-in-graphite/
    * count how often people click on buttons in side bars (with google analytics)
    * get statistics on db usage

SEO:
    * how to deal with large sitemaps?

Testing:
    * perform code testing after commit (github hooks)
    * testing in browsers, selenium, http://www.browserstack.com
    * tests and test coverage

Emails:
    * sending emails using mailgun.net or mailchimp.com (?) or amazon ses

Performance:
    * multi-key indices in db (http://www.postgresql.org/docs/9.1/interactive/indexes-multicolumn.html)
    * make lazy reformal loading
    * start using subqueries - http://charlesleifer.com/blog/working-around-django-s-orm-to-do-interesting-things-with-gfks/
    * use debug toolbar, page speed to optimize page load
    * activate compression for tinymce
    * add all mime types to gzip list of nginx configuration
    * cache ajax (json) queries, gzip it, don't make authentication db queries for public ajax queries
    * move static content to sub-domain (?), keep it cookie-free (how?)
    * use pngcrush (pngcrush -rem alla -reduce -brute image.png result.png) to compress pngs; gif->png?
    * use jpegtran (jpegtran -copy none -optimize -perfect image.jpg > res.jpg) to compress jpegs
    * postgres configuration
    * compress favicon

Cache:
    * use template caching

AB testing:
    * https://github.com/johnboxall/django-ab
    * https://bitbucket.org/akoha/django-lean/wiki/Home
    * http://visualwebsiteoptimizer.com/feature-list.php

Celery:
    * recalculate entities points (once a day)

* update select widget in breadcrumbs with chosen (?)

* analyze email postfixes, detect sending problems, configure properly

* stackoverflow-like ordering of news

* search + autocompletion

Deployment:
    * far expires date in nginx
    * minification of static files (http://developer.yahoo.com/yui/compressor/)
    * configure nginx (see config settings)
    * switch to wsgi
    * implement fabric deployment for developers (settings in deployment/config.json) + automate virtualenv
    * put site_settings.py.example in repo (ready for developer)

    * describe complete deployment process - file access rights, running services, directories and users to create, creating database, etc.
    * database backups
    * configure virtualenv inside settings properly
    * separate server for media files? (512 mb)
    * configure firewall (ufw)

* предлагать друзей на площадке пользуясь списком друзей в соц сетях

* start writing documentation

* project news page - store in db, rss + ability to post to social networks automatically

* send email when someone adds you to contacts

* don't use cache for anonymous users on the dev server (for convinience)

* start using celery

* use twisted inside scrapy to download pages with several parallel processes

* написать текст на страницах 404 и 500

* highlight buttons in the menu

* put all our media (video, presentations, logos, infographics, etc.) online in social networks

* use pylint, pyflakes for code checking (pylint --generate-rcfile > config_path; pylint --rcfile=config_path services/ > report.txt)

* use disqus api - https://github.com/disqus/DISQUS-API-Recipes/tree/master/python/oauth, https://github.com/disqus/disqus-python

* move reformal options to settings

* Automatically find valuable mentions of officials in news, e.g. lenta.ru and post them as a link
