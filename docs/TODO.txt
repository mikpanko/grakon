Registration
    * configure registration with fb, vk, google
    * consider case when user refuses to give rights to application
    * create page for LOGIN_ERROR_URL
    * configure django-social-auth
    * merge accounts from social and email (see SOCIAL_AUTH_ASSOCIATE_BY_MAIL)
    * captchas
    * restore location on error in form
    * fix redirect after logging in
    * google allows to login automatically if account with this email already exists (is it ok?)

Locations:
    * Fix location names, filter out small districts
    * add foreign countries
    * update select widget in breadcrumbs with chosen (?)

Front-end
    * show g+ and vk buttons in dev mode

Cache:
    * cache all frequently used info about users (as one big dict) and locations

Deployment:
    * start using south and run migrate
    * configure nginx (see config settings)
    * generate js/code_data.js on deployment
    * static files deployment, minification (http://developer.yahoo.com/yui/compressor/), caching time
    * switch to wsgi
    * put config.json to repo
    * implement fabric deployment for developers (settings in deployment/config.json)

* file with all passwords, social applications (where to get them)
* sitemaps

* use celery to send emails (method for delayed sending of email)

--------------------------------------
* Disallow paths in robots.txt (see django-social-auth example)

* create element forms for resources and skills (like for location)

* write Profile manager method which gets multiple profiles info (get from cache at once,
  get missing from db)

* generate links in breadcrumbs in such a way that an opened tab doesn't change at navigation

* develop template for letters
* fix texts of the letters

* move password change views to users (from auth)
* reasons to register on registration page (merge with landing page)

* set application permissions (e.g. FACEBOOK_EXTENDED_PERMISSIONS)

------------------------------

* process cases when edit tab is not shown but user tries to access it, generalize tabs creation

* table for saving all user's points, where they come from

* create google oauth2 app from grakon account (?)

* show post messages

* check that remove account works

* move fb:admins meta tag value out of template

* shortcut to prevent using enter in dialog forms

* allow user to start working without confirmation of his email, but limit his functionality (?)
--------------------------------------

Front-end
    * conventions file for front-end developer (docs about tabs and buttons, page layout)
    * take only necessary parts of jquery-ui, compress
    * share and share_horizontal are overlap a lot
    * when two buttons are close to each other (e.g. profile edit) - line appears between them
    * add google+ page to list of services
    * organize css by files, add blocks, styling
    * reorganize button tag (do we need it?)
    * use sprites to extract images from one file (especially icons) (https://github.com/jorgebastida/glue)

    * http://sass-lang.com/, http://www.bigjason.com/blog/using-sass-django/,
      http://compass-style.org/blog/2011/05/09/compass-django/
    * https://github.com/dziegler/django-css
    * http://www.modernizr.com/

Analytics:
    * analytics of registration (events in GA - http://code.google.com/apis/analytics/docs/tracking/eventTrackerGuide.html) - success, errors, just visits
    * analyze when user visited site/logged in last time
    * configure logging, sentry
    * analyze access logs, use google analytics api; regularly build and analyze statistics of visits,
      which pages are visited
    * use yandex targets (?) to monitor pressing buttons, registration and other activities
    * use page visits analytics to determine optimal caching times
    * use Graphite for server monitoring - http://blog.mozilla.com/webdev/2012/04/05/tracking-deployments-in-graphite/
    * count how often people click on buttons in side bars (with google analytics)
    * client-side error logging - http://www.thetaboard.com/blog/client-side-error-logging-with-google-analytics?r=378
    * get statistics on db usage

SEO:
    * Webmaster Tools, seo, https://www.google.com/webmasters/
    * how to deal with large sitemaps?

Testing:
    * perform code testing after commit (github hooks)
    * testing in browsers, selenium, http://www.browserstack.com
    * tests and test coverage

Emails:
    * sign emails with "Администрация Гракона" or smth. else
    * track emails with http://cutroni.com/blog/2008/11/04/email-tracking-with-google-analytics/
    * sending emails using mailgun.net or mailchimp.com (?)

Performance:
    * activate compression for tinymce
    * use debug toolbar, page speed to optimize page load
    * add all mime types to gzip list of nginx configuration
    * move scripts loading at the bottom of html (or use defer)
    * cache ajax (json) queries, gzip it, don't make authentication db queries for public ajax queries
    * move static content to sub-domain (?), keep it cookie-free (how?)
    * use pngcrush (pngcrush -rem alla -reduce -brute image.png result.png) to compress pngs; gif->png?
    * use jpegtran (jpegtran -copy none -optimize -perfect image.jpg > res.jpg) to compress jpegs
    * compress favicon, enable gzip, serve directly from nginx at /favicon.ico, caching

Cache:
    * use template caching

AB testing:
    * https://github.com/johnboxall/django-ab
    * https://bitbucket.org/akoha/django-lean/wiki/Home
    * http://visualwebsiteoptimizer.com/feature-list.php

* user pictures

* replace disqus?
* automatically disable discus at dev server

* analyze email postfixes, detect sending problems, configure properly

* stackoverflow-like ordering of news

* search + autocompletion

Deployment:
    * include sqlite file with empty db ready for use
    * describe complete deployment process - file access rights, running services, directories and users to create, creating database, etc.
    * database backups
    * configure virtualenv inside settings properly
    * separate server for media files? (512 mb)
    * switch to postgres?

* set proper page titles

* предлагать друзей на площадке пользуясь списком друзей в соц сетях

* replace grakon_share_logo.jpg with logos/share.jpg (google oauth2 app), smaller version (60x60),
  move logo url to settings

* start writing documentation

* project news page - store in db, rss + ability to post to social networks automatically

* send email when someone adds you to contacts

* don't use cache for anonymous users on the dev server (for convinience)

* start using celery

* use twisted inside scrapy to download pages with several parallel processes

* написать текст на страницах 404 и 500

* new email address for sending emails
