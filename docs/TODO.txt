* lots of locations data is not downloaded and hierarchy is built incorrectly

* process cases when edit tab is not shown but user tries to access it, generalize tabs creation

* in-place editing of user's resources and other

* add foreign countries

* move fb:admins meta tag value out of template

* shortcut to prevent using enter in dialog forms

* check that remove account works

* sitemaps

* table for saving all user's points, where they come from

Registration
    * social registration
    * create page for LOGIN_ERROR_URL
    * configure django-social-auth
    * merge accounts from social and email (see SOCIAL_AUTH_ASSOCIATE_BY_MAIL)
    * allow user to start working without confirmation of his email, but limit his functionality

--------------------------------------


* show post messages
* tests and test coverage

* move password change views to users (from auth)
* reasons to register on registration page

* local copy of vkontakte script (for offline development)

* set application permissions (e.g. FACEBOOK_EXTENDED_PERMISSIONS)

------------------------------

* analytics of registration (events in GA - http://code.google.com/apis/analytics/docs/tracking/eventTrackerGuide.html) - success, errors, just visits

* captchas

* new email address for sending emails

* create google oauth2 app from grakon account (?)

* file with all passwords, social applications (where to get them)

--------------------------------------

Front-end
    * conventions file for front-end developer (docs about tabs and buttons, page layout)
    * take only necessary parts of jquery-ui, compress
    * Reorganize classes in button and tabs templates, icons are not used in buttons anymore
    * share and share_horizontal are overlap a lot
    * when two buttons are close to each other (e.g. profile edit) - line appears between them
    * add google+ page to list of services
    * organize css by files, add blocks, styling
    * show g+ and vk buttons in dev mode

    * http://sass-lang.com/, http://www.bigjason.com/blog/using-sass-django/,
      http://compass-style.org/blog/2011/05/09/compass-django/
    * https://github.com/dziegler/django-css
    * http://www.modernizr.com/
    * use sprites to extract images from one file (especially icons)

Analytics:
    * analyze when user visited site/logged in last time
    * configure logging, sentry
    * analyze access logs, use google analytics api; regularly build and analyze statistics of visits,
      which pages are visited
    * use yandex targets (?) to monitor pressing buttons, registration and other activities
    * use page visits analytics to determine optimal caching times
    * use Graphite for server monitoring - http://blog.mozilla.com/webdev/2012/04/05/tracking-deployments-in-graphite/
    * count how often people click on buttons in side bars (with google analytics)

SEO:
    * Webmaster Tools, seo, https://www.google.com/webmasters/
    * how to deal with large sitemaps?

Testing:
    * perform testing and code testing after commit (github hooks)
    * testing in browsers, selenium, http://www.browserstack.com

Emails:
    * sign emails with "Администрация Гракона" or smth. else
    * track emails with http://cutroni.com/blog/2008/11/04/email-tracking-with-google-analytics/
    * sending emails using mailgun.net or mailchimp.com (?)

Performance:
    * activate compression for tinymce
    * use debug toolbar, page speed to optimize page load

Cache:
    * cache all frequently used info about users (as one big dict)

AB testing:
    * https://github.com/johnboxall/django-ab
    * https://bitbucket.org/akoha/django-lean/wiki/Home
    * http://visualwebsiteoptimizer.com/feature-list.php

* user pictures
* replace disqus?

* analyze email postfixes, detect sending problems, configure properly

* stackoverflow-like ordering of news

* search + autocompletion

Deployment:
    * include sqlite file with empty db ready for use
    * configure nginx
    * describe complete deployment process - file access rights, running services, directories and users to create, creating database, etc.
    * database backups
    * configure virtualenv inside settings properly
    * generate server.sh as well
    * separate server for media files? (512 mb)
    * generate js/code_data.js on deployment

* set proper page titles

* предлагать друзей на площадке пользуясь списком друзей в соц сетях

* replace grakon_share_logo.jpg with logos/share.jpg (google oauth2 app), smaller version (60x60)

* start writing documentation

* project news page - store in db, rss + ability to post to social networks automatically

* send email when someone adds you to contacts

* don't use cache for anonymous users on the dev server (for convinience)

* switch to postgres?

* start using celery

* use twisted inside scrapy to download pages with several parallel processes

* написать текст на страницах 404 и 500

* automatically disable discus at dev server

* client-side error logging - http://www.thetaboard.com/blog/client-side-error-logging-with-google-analytics?r=378
